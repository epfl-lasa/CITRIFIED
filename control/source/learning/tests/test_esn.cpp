#include "learning/ESN.h"

#include <stdexcept>
#include <gtest/gtest.h>

using namespace learning;

class ESNTest : public testing::Test {
protected:
  void SetUp() override {
    path = std::string(LEARNING_TEST_FIXTURES) + "test_esn.yaml";
    setTestConfigurations();
  }

  std::string path;

  double tol = 1e-3;

  // Known test trajectory generated by fixtures/generateFilterTest.m for filter with name 'filer_test'
  Eigen::Matrix<double, 50, 6> testInput;
  esnPrediction testOutput;

  void setTestConfigurations() {
    testInput.col(0)
        << 0.00538478518680964, 0.00613467337085192, 0.00685166270039529, 0.00685325184502191, 0.00721570658396730, 0.00701921905869890, 0.00762472440768125, 0.00729661820164005, 0.00691250285364957, 0.00653598220433580, 0.00558150398036845, 0.00531910185188690, 0.00525760331301302, 0.00736501450568156, 0.00620489092791151, 0.00605163686487724, 0.00601368037894162, 0.00618016198527560, 0.00656942395822304, 0.00570000140699338, 0.00547480883830045, 0.00599628228937370, 0.00515721172877451, 0.00517277846399636, 0.00492467427718723, 0.00507224591977966, 0.00507579180094026, 0.00561196134183558, 0.00497675083191009, 0.00498139737824484, 0.00462431055163582, 0.00480873417815160, 0.00503045019863010, 0.00453342931789870, 0.00482288958684541, 0.00576566000668366, 0.00585737927411726, 0.00633731487435412, 0.00553652928491081, 0.00524526850936423, 0.00514805519834089, 0.00514928019843580, 0.00558099244694214, 0.00589878830281484, 0.00519580045240203, 0.00406733377193885, 0.00466456076357500, 0.00452598329552623, 0.00480625977888084, 0.00431587353191241;
    testInput.col(1)
        << 0.0520777859857284, 0.0508634499257829, 0.0502731863306771, 0.0488690902977931, 0.0479669847374420, 0.0470148625330709, 0.0468547269518605, 0.0473358803729751, 0.0485233882976135, 0.0482041957908840, 0.0502347051645927, 0.0481708289619528, 0.0484699650387756, 0.0474231653689700, 0.0492760149048973, 0.0484141532158307, 0.0459385696444240, 0.0455134691358956, 0.0459097293403740, 0.0470970027500739, 0.0455600295829149, 0.0463732460267495, 0.0468130161520021, 0.0458991737677511, 0.0456927843837690, 0.0450381722218820, 0.0436050844419602, 0.0426615519000713, 0.0449579143047187, 0.0427165239495826, 0.0442093915850101, 0.0422633296517784, 0.0422087913808398, 0.0415001467932744, 0.0424523874148487, 0.0427872085919244, 0.0415742909887944, 0.0412224102142632, 0.0423331566965989, 0.0410506077488056, 0.0417235568673187, 0.0417283107604177, 0.0412813479738963, 0.0421808163798954, 0.0416604799443141, 0.0412298039675635, 0.0390731059610828, 0.0372009648213720, 0.0343670242385526, 0.0362947767124252;
    testInput.col(2)
        << 0.320954000000000, 0.343782000000000, 0.342656000000000, 0.318801000000000, 0.314927000000000, 0.306407000000000, 0.295311000000000, 0.334409000000000, 0.378769000000000, 0.405734000000000, 0.386153000000000, 0.394456000000000, 0.414195000000000, 0.427966000000000, 0.427950000000000, 0.444419000000000, 0.506415000000000, 0.520053000000000, 0.529225000000000, 0.524089000000000, 0.527267000000000, 0.551833000000000, 0.568271000000000, 0.586277000000000, 0.601969000000000, 0.633309000000000, 0.678077000000000, 0.736765000000000, 0.763284000000000, 0.742485000000000, 0.755415000000000, 0.782200000000000, 0.796069000000000, 0.814292000000000, 0.861180000000000, 0.856969000000000, 0.884442000000000, 0.900529000000000, 0.934475000000000, 0.937068000000000, 0.944060000000000, 0.920070000000000, 0.945220000000000, 0.981745000000000, 1.00872000000000, 1.18713000000000, 1.18050000000000, 1.17070000000000, 1.19816000000000, 1.20701000000000;
    testInput.col(3)
        << -2.39183000000000, -2.48406000000000, -2.60783000000000, -2.74789000000000, -2.83555000000000, -2.94220000000000, -3.04656000000000, -3.11521000000000, -3.29631000000000, -3.35426000000000, -3.45309000000000, -3.72126000000000, -3.73006000000000, -3.82317000000000, -3.81397000000000, -3.91077000000000, -4.18387000000000, -4.26193000000000, -4.29467000000000, -4.38230000000000, -4.38101000000000, -4.47295000000000, -4.57340000000000, -4.68462000000000, -4.75022000000000, -4.83631000000000, -4.99599000000000, -5.07973000000000, -5.11337000000000, -5.20128000000000, -5.22756000000000, -5.26793000000000, -5.38028000000000, -5.45077000000000, -5.61255000000000, -5.68522000000000, -5.82744000000000, -5.86086000000000, -5.91445000000000, -5.93981000000000, -6.03099000000000, -6.07536000000000, -6.18416000000000, -6.24172000000000, -6.30878000000000, -6.59274000000000, -6.62800000000000, -6.65233000000000, -6.69878000000000, -6.73110000000000;
    testInput.col(4)
        << 0.717425742574289, 0.827058823529296, 0.828844221105462, 0.878830000000097, 0.926594059405982, 0.971687804878208, 1.13888172042972, 1.33184023668641, 1.09603211009171, 1.18406074766366, 1.59789880952432, 0.676468333333336, 0.723867469879501, 1.65268906249988, 1.69975126903551, 1.67302843601891, 0.804733766233754, 0.947181598062962, 2.60266455696253, 2.55556213017756, 2.63488372092930, 2.30669902912602, 2.23242152466372, 2.83222826086878, 2.68507389162623, 2.57764705882374, 2.07289198606293, 1.98983974358974, 3.02518691588686, 2.82284518828438, 2.76633858267742, 3.46616113744067, 4.04702127659600, 4.03612244898058, 2.83472413793070, 2.46777456647366, 3.48976377952788, 5.78440251572577, 6.11435897436069, 5.78204678362538, 6.20842424242200, 7.63187050359833, 6.86275000000076, 4.77277310924271, 4.95569620253168, 1.59513797634698, 1.66507304116865, 7.79698795180620, 8.09454545454689, 8.34909090909240;
    testInput.col(5)
        << 0.761782178217855, 0.570534759358211, 0.269648241206008, -0.0277500000000031, -0.352871287128728, -0.701609756097675, -1.20155913978454, -1.83733727810654, -1.85839449541278, -2.37177570093479, -3.67827380952500, -1.75354761904763, -2.08026506024091, -5.20067708333295, -5.79832487309637, -6.13549763033159, -3.15041125541121, -3.93452784503635, -11.4113924050655, -11.7725443786984, -12.7010465116234, -11.5917475728146, -11.6569506726460, -15.3211956521697, -15.0068965517276, -14.8475113122184, -12.2777003484333, -12.0932692307692, -18.8280373831714, -17.9577405857732, -17.9562992126001, -22.9184834123216, -27.2138297872357, -27.5602040816394, -19.6286206896528, -17.3043352601133, -24.7488188976401, -41.4389937107097, -44.1974358974483, -42.1269005847929, -45.5466666666502, -56.3223021582823, -50.9000000000057, -35.5491596638582, -37.0392405063294, -11.9529566360058, -12.5023904382469, -58.6271084337273, -60.9042424242533, -62.8218181818294;

    testOutput.classIndex = 1;
    testOutput.className = "two";
    Eigen::Matrix<double, 5, 1> predictions;
    predictions << 0.4424, 0.7546, 0.0255, -0.2225, 0;
    testOutput.predictions = predictions;
  }
};

TEST_F(ESNTest, TestPrediction) {
  ESN esn(path);
  esnPrediction result = esn.predict(testInput, 3);
  for (std::size_t i = 0; i < result.predictions.size(); ++i) {
    EXPECT_NEAR(result.predictions(i), testOutput.predictions(i), tol);
  }
  EXPECT_STREQ(result.className.c_str(), testOutput.className.c_str());
  EXPECT_EQ(result.classIndex, testOutput.classIndex);
}